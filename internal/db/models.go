// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Usertype string

const (
	UsertypeUSER  Usertype = "USER"
	UsertypeADMIN Usertype = "ADMIN"
)

func (e *Usertype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Usertype(s)
	case string:
		*e = Usertype(s)
	default:
		return fmt.Errorf("unsupported scan type for Usertype: %T", src)
	}
	return nil
}

type NullUsertype struct {
	Usertype Usertype `json:"usertype"`
	Valid    bool     `json:"valid"` // Valid is true if Usertype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsertype) Scan(value interface{}) error {
	if value == nil {
		ns.Usertype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Usertype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsertype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Usertype), nil
}

type User struct {
	ID         pgtype.UUID        `json:"id"`
	TelegramID pgtype.Int8        `json:"telegram_id"`
	FirstName  string             `json:"first_name"`
	LastName   pgtype.Text        `json:"last_name"`
	Username   pgtype.Text        `json:"username"`
	Language   pgtype.Text        `json:"language"`
	UserType   Usertype           `json:"user_type"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}
